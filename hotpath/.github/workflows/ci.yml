name: DVREN-HOTPATH CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release
  CUDA_VERSION: "12.1"

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.14
      with:
        cuda: ${{ env.CUDA_VERSION }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "visual_studio_integration"]'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml numpy

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CUDA_ARCHITECTURES="75;86;89"

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Run Test Suite
      id: test
      continue-on-error: true
      run: |
        cd build\Release
        .\hp_runner.exe
      shell: cmd

    - name: Validate Gates
      id: validate
      run: |
        python scripts/validate_gates.py
      shell: cmd

    - name: Generate Hardware Profile
      if: always()
      run: |
        python scripts/profile.py
      shell: cmd

    - name: Archive Artifacts
      if: always()
      run: |
        python scripts/archive_artifacts.py
      shell: cmd

    - name: Upload Test Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          scoreboard.json
          hardware_profile.json
          benchmark_results.json
          profiling_summary.txt
        retention-days: 30

    - name: Upload Archived Artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: archived-artifacts
        path: GOLDENS/archives/
        retention-days: 90

    - name: Lock Thresholds (main branch only)
      if: github.ref == 'refs/heads/main' && success()
      run: |
        python scripts/lock_thresholds.py
        git config --global user.name "CI Bot"
        git config --global user.email "ci@dvren-hotpath.local"
        git add tests/thresholds.yaml
        git diff --quiet && git diff --staged --quiet || git commit -m "chore: lock performance thresholds [skip ci]"
        git push || echo "No changes to push"
      shell: bash

    - name: Check Gate Results
      if: steps.validate.outcome == 'success'
      run: |
        python scripts/ci_check.py
      shell: cmd

    - name: Report Status
      if: always()
      run: |
        echo "=== CI Pipeline Summary ==="
        echo "Build: ${{ job.status }}"
        echo "Tests: ${{ steps.test.outcome }}"
        echo "Gates: ${{ steps.validate.outcome }}"
        echo "=========================="
      shell: cmd

    - name: Fail if Gates Failed
      if: steps.validate.outcome != 'success'
      run: exit 1
      shell: cmd

  performance-benchmark:
    runs-on: windows-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup CUDA Toolkit
      uses: Jimver/cuda-toolkit@v0.2.14
      with:
        cuda: ${{ env.CUDA_VERSION }}
        method: 'network'
        sub-packages: '["nvcc", "cudart", "visual_studio_integration"]'

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml numpy

    - name: Configure CMake
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -DCMAKE_CUDA_ARCHITECTURES="75;86;89"

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }}

    - name: Run Performance Benchmarks
      run: |
        python scripts/profile.py --extended
      shell: cmd

    - name: Upload Performance Results
      uses: actions/upload-artifact@v4
      with:
        name: performance-benchmark
        path: |
          benchmark_results.json
          profiling_summary.txt
        retention-days: 90

