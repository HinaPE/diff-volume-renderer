include(FetchContent)

set(OPENVDB_GIT_TAG v12.1.1 CACHE STRING "")

set(OPENVDB_BUILD_CORE ON CACHE BOOL "")
set(OPENVDB_BUILD_BINARIES ON CACHE BOOL "")
set(OPENVDB_BUILD_PYTHON_MODULE OFF CACHE BOOL "")
set(OPENVDB_BUILD_UNITTESTS OFF CACHE BOOL "")
set(OPENVDB_BUILD_DOCS OFF CACHE BOOL "")
set(OPENVDB_BUILD_HOUDINI_PLUGIN OFF CACHE BOOL "")
set(OPENVDB_BUILD_HOUDINI_ABITESTS OFF CACHE BOOL "")
set(OPENVDB_BUILD_MAYA_PLUGIN OFF CACHE BOOL "")
set(OPENVDB_BUILD_AX OFF CACHE BOOL "")
set(OPENVDB_BUILD_AX_UNITTESTS OFF CACHE BOOL "")
set(OPENVDB_BUILD_NANOVDB ON CACHE BOOL "")
set(USE_BLOSC ON CACHE BOOL "")
set(USE_TBB ON CACHE BOOL "")
set(USE_ZLIB ON CACHE BOOL "")
set(USE_EXR ON CACHE BOOL "")

set(NANOVDB_BUILD_TOOLS ON CACHE BOOL "")
set(NANOVDB_BUILD_UNITTESTS OFF CACHE BOOL "")
set(NANOVDB_BUILD_EXAMPLES OFF CACHE BOOL "")
set(NANOVDB_BUILD_PYTHON_MODULE OFF CACHE BOOL "")
set(NANOVDB_USE_INTRINSICS ON CACHE BOOL "")
set(NANOVDB_USE_CUDA ON CACHE BOOL "")
set(NANOVDB_CUDA_KEEP_PTX ON CACHE BOOL "")
set(NANOVDB_USE_OPENVDB ON CACHE BOOL "")
set(NANOVDB_USE_BLOSC ON CACHE BOOL "")
set(NANOVDB_USE_ZLIB ON CACHE BOOL "")
set(NANOVDB_USE_TBB ON CACHE BOOL "")
set(NANOVDB_USE_MAGICAVOXEL ON CACHE BOOL "")
set(NANOVDB_ALLOW_FETCHCONTENT ON CACHE BOOL "")

FetchContent_Declare(openvdb
        GIT_REPOSITORY https://github.com/AcademySoftwareFoundation/openvdb.git
        GIT_TAG ${OPENVDB_GIT_TAG}
)
FetchContent_MakeAvailable(openvdb)

function(use_vdb target)
    set(_ovdb_target "")
    if (TARGET OpenVDB::openvdb)
        set(_ovdb_target OpenVDB::openvdb)
    elseif (TARGET openvdb_shared)
        set(_ovdb_target openvdb_shared)
    elseif (TARGET openvdb_static)
        set(_ovdb_target openvdb_static)
    elseif (TARGET openvdb)
        set(_ovdb_target openvdb)
    else ()
        message(FATAL_ERROR "Cannot find OpenVDB target")
    endif ()
    message(STATUS "Using OpenVDB target: ${_ovdb_target}")
    target_link_libraries(${target} PRIVATE ${_ovdb_target})

    if (TARGET nanovdb::nanovdb)
        set(_nanovdb_target nanovdb::nanovdb)
    elseif (TARGET nanovdb_shared)
        set(_nanovdb_target nanovdb_shared)
    elseif (TARGET nanovdb_static)
        set(_nanovdb_target nanovdb_static)
    elseif (TARGET nanovdb)
        set(_nanovdb_target nanovdb)
    else ()
        message(FATAL_ERROR "Cannot find NanoVDB target")
    endif ()
    message(STATUS "Using NanoVDB target: ${_nanovdb_target}")
    target_link_libraries(${target} PRIVATE ${_nanovdb_target})
endfunction()